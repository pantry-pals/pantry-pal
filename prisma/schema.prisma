generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition @default(good)
  owner     String

  @@map("stuff")
}

enum Role {
  USER
  ADMIN
}

enum Condition {
  excellent
  good
  fair
  poor
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  role          Role     @default(USER)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  emailVerificationCodes EmailVerificationCode[]
  passwordResetTokens    PasswordResetToken[]
}

model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  code      String // store as string so you can handle leading zeros
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@index([userId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model Produce {
  id               Int       @id @default(autoincrement())
  name             String
  type             String
  location         String
  storage          String
  quantity         Float
  unit             String
  expiration       DateTime?
  owner            String
  image            String?
  restockThreshold Float?
  restockTrigger    String   @default("empty")
  customThreshold   Float?

  @@unique([name, owner])
}

model ShoppingList {
  id        Int      @id @default(autoincrement())
  name      String
  owner     String // email, username, or household name
  createdAt DateTime @default(now())

  items ShoppingListItem[]

  @@unique([name, owner])
}

model ShoppingListItem {
  id              Int      @id @default(autoincrement())
  shoppingListId  Int
  name            String // name of the item (not linked to pantry)
  quantity        Float
  unit            String?
  price           Decimal? @db.Decimal(10, 2)
  restockTrigger  String?
  customThreshold Float?

  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id])

  @@unique([shoppingListId, name])
}

model Recipe {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  imageUrl     String?
  cuisine      String
  dietary      String[]   // e.g., ["Vegan","Gluten-Free"]
  ingredients  String[]   // e.g., ["onion","tomato","basil"]
  owner        String?

  // Add these fields (nullable to match existing rows)
  instructions String?    @db.Text
  servings     Int?
  prepMinutes  Int?
  cookMinutes  Int?
  sourceUrl    String?

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([title, owner], name: "title_owner")
  @@index([title])
  @@index([cuisine])
}
